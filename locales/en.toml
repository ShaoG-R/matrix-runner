[common]
project_root_detected = "Project root detected at: {path}"
testing_crate = "Testing crate: {name}"
loading_test_matrix = "Loading test matrix from: {path}"
current_os = "Current OS detected: {os}"
flaky_cases_found = "{count} flaky case(s) found. These are allowed to fail on the current OS."
all_tests_passed = "All tests passed successfully!"
no_cases_to_run = "No test cases to run for this runner, exiting successfully."
shutdown_signal = "Ctrl+C received, initiating graceful shutdown..."
manifest_read_failed = "Failed to read manifest file at '{path}'"
manifest_parse_failed = "Failed to parse Cargo.toml manifest"
config_read_failed_path = "Failed to find or read config file at '{path}': {}"
config_parse_failed = "Failed to parse TestMatrix.toml config"
project_dir_not_found = "Project directory not found at '{path}'"
cargo_fetch_failed = "'cargo fetch' failed. Please check your network and Cargo.toml file."
capture_stdout_failed = "Failed to capture stdout of child process"
capture_stderr_failed = "Failed to capture stderr of child process"

[init]
file_exists = "Configuration file '{path}' already exists."
use_force = "Use --force to overwrite."
create_parent_dir_failed = "Failed to create parent directory '{path}'."
write_failed = "Failed to write to '{path}'"
success = "Successfully created configuration file: '{path}'."
next_steps = "Next steps: Edit the file and run 'matrix-runner run'."

[run]
filtered_arch_cases = "Filtered out {filtered} of {total} cases based on current architecture."
running_as_split_runner = "Running as runner {index} of {total}, with {count} test case(s)."
running_as_single_runner = "Running all test cases as a single runner."
building_test = "Building test: {}"
running_test = "Running test: {}"
test_passed = "Test '{name}' passed in {duration}"
test_failed = "Test '{name}' failed in {duration}"
test_timeout = "Test '{name}' timed out after {timeout} seconds!"
test_timeout_message = "Test failed due to timeout."
test_retrying = "Test '{name}' failed. Retrying ({attempt}/{retries})..."
test_passed_on_retry = "Test '{name}' passed after {retries} retries."
test_failed_after_retries = "Test '{name}' failed after {retries} retries."
build_success = "Build successful in {duration}."
build_failed = "Build failed in {duration}."
build_log = "Build Log:"
test_log = "Test Log:"
no_error_output = "No error output captured."
compiler_error_parse_failed = "Could not parse specific compiler errors. Raw output snippet:"
build_failed_unexpected = "Build failed unexpectedly."
test_no_binaries = "No binaries found for test case '{name}'"
test_no_binaries_message = "Ensure your Cargo.toml is configured correctly and a build was successful."

[report]
summary_banner = "Test Summary"
status_passed = "PASSED"
status_failed = "FAILED"
status_timeout = "TIMEOUT"
status_skipped = "SKIPPED"
status_allowed_failure = "ALLOWED FAILURE"
unexpected_failure_banner = "UNEXPECTED FAILURE DETECTED"
report_header_failure = "Failure in test: {name}"

[cli]
about = "A powerful, configuration-driven test executor for Rust projects."

[cli.lang]
help = "Sets the language for the interface."

[cli.run]
about = "Runs tests according to the test matrix configuration."
jobs = "Number of parallel jobs to run. Defaults to half of the CPU cores + 1."
config = "Path to the test matrix configuration file."
project_dir = "Path to the project directory."
total_runners = "Total number of distributed runners (for CI)."
runner_index = "Index of this runner (0-based, for CI)."
html = "Path for HTML report output."
filtered_arch_cases = "{filtered} of {total} cases were filtered out for other architectures."
running_as_split_runner = "Running as runner {index} of {total}, with {count} cases assigned."
running_as_single_runner = "Running as a single runner."
critical_error = "Critical error during test execution: {error}"

[cli.init]
about = "Initializes a new test matrix configuration."
output = "Path for the new configuration file."
force = "Force overwrite if the file exists."
lang = "Specify the language for error messages."
