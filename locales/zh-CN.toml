[common]
project_root_detected = "检测到项目根目录于: %{path}"
testing_crate = "正在测试的 Crate: %{name}"
loading_test_matrix = "正在从 %{path} 加载测试矩阵"
current_os = "检测到当前操作系统: %{os}"
flaky_cases_found = "发现 %{count} 个不稳定的测试用例。这些用例在当前操作系统上允许失败。"
all_tests_passed = "所有测试成功通过！"
no_cases_to_run = "此执行器没有要运行的测试用例，成功退出。"
shutdown_signal = "接收到 Ctrl+C，正在启动平稳关闭..."
manifest_read_failed = "读取清单文件 '%{path}' 失败"
manifest_parse_failed = "解析 Cargo.toml 清单文件失败"
config_read_failed_path = "找不到或无法读取配置文件 '%{path}'"
config_parse_failed = "解析 TestMatrix.toml 配置文件失败"
project_dir_not_found = "在 '%{path}' 找不到项目目录"
cargo_fetch_failed = "'cargo fetch' 执行失败。请检查您的网络和 Cargo.toml 文件。"
capture_stdout_failed = "捕获子进程的 stdout 失败"
capture_stderr_failed = "捕获子进程的 stderr 失败"

[init]
file_exists = "配置文件 '%{path}' 已存在。"
use_force = "使用 --force 标志以覆盖。"
create_parent_dir_failed = "创建父目录 '%{path}' 失败。"
write_failed = "写入 '%{path}' 失败。"
success = "成功创建配置文件: '%{path}'。"
next_steps = "后续步骤: 编辑该文件，然后运行 'matrix-runner run'。"

[run]
filtered_arch_cases = "基于当前架构，已过滤掉 %{total} 个案例中的 %{filtered} 个。"
running_as_split_runner = "作为第 %{index}/%{total} 号运行器运行，共 %{count} 个测试用例。"
running_as_single_runner = "作为单个执行器运行所有测试用例。"
building_test = "正在构建测试: '%{name}'"
running_test = "正在运行测试: '%{name}'"
test_passed = "测试 '%{name}' 通过，用时 %{duration}"
test_failed = "测试 '%{name}' 失败，用时 %{duration}"
test_timeout = "测试 '%{name}' 在 %{timeout} 秒后超时！"
test_timeout_message = "测试因超时而失败。"
test_retrying = "测试 '%{name}' 失败。正在重试 (%{attempt}/%{retries}) ..."
test_passed_on_retry = "测试 '%{name}' 在重试 %{retries} 次后通过。"
test_failed_after_retries = "测试 '%{name}' 在 %{retries} 次重试后失败。"
build_success = "构建成功，用时 %{duration}。"
build_failed = "构建失败，用时 %{duration}。"
build_log = "构建日志："
test_log = "测试日志："
no_error_output = "未捕获到错误输出。"
html_report_generating = "正在生成 HTML 报告于: '%{path}'"
html_report_failed = "生成 HTML 报告失败:"
compiler_error_parse_failed = "无法解析特定的编译器错误。以下是原始输出片段："
build_failed_unexpected = "构建意外失败。"
test_no_binaries = "未找到测试用例 '%{name}' 的二进制文件"
test_no_binaries_message = "请确保您的 Cargo.toml 配置正确并且构建已成功。"
command_prefix = "运行命令："

[report]
summary_banner = "测试总结"
status_passed = "通过"
status_failed = "失败"
status_timeout = "超时"
status_skipped = "跳过"
status_allowed_failure = "允许失败"
unexpected_failure_banner = "检测到意外失败"
report_header_failure = "测试失败：'%{name}'"

[html_report]
title = "测试矩阵报告"
main_header = "测试矩阵报告"
toggle_output = "切换输出"

[html_report.summary]
total = "总计"
passed = "通过"
failed = "失败"
skipped = "跳过"


[html_report.table.header]
name = "名称"
status = "状态"
duration = "耗时"
retries = "重试"


[cli]
about = "一个强大的、配置驱动的 Rust 项目测试执行器。"

[cli.lang]
help = "设置界面语言。"

[cli.run]
about = "根据测试矩阵配置运行测试。"
jobs = "要运行的并行任务数量。默认为 CPU 核心数的一半 + 1。"
config = "测试矩阵配置文件的路径。"
project_dir = "项目目录的路径。"
total_runners = "分布式运行器的总数（用于 CI）。"
runner_index = "此运行器的索引（从 0 开始，用于 CI）。"
html = "HTML 报告的输出路径。"
fast_fail = "在第一次意外失败后立即停止测试运行。"
filtered_arch_cases = "%{filtered} 个案例因架构不匹配而被过滤，总共有 %{total} 个案例。"
running_as_split_runner = "作为第 %{index} 个运行器（共 %{total} 个），已分配 %{count} 个案例。"
running_as_single_runner = "作为单个运行器运行。"
critical_error = "测试执行期间发生严重错误：%{error}"

[cli.init]
about = "初始化一个新的测试矩阵配置。"
output = "新配置文件的路径。"
force = "如果文件存在，则强制覆盖。"
lang = "指定错误消息的语言。"