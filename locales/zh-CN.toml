# 通用
build_failure = "构建失败"
test_failure = "测试失败"

# main.rs
shutdown_signal = "接收到 Ctrl+C，正在启动平稳关闭..."
temp_dir_cleanup_info = "成功的测试将自动清理临时目录。"
failure_artifact_info = "失败测试的产物将保留在 './target-errors' 目录中。"
dep_fetch_start = "正在预取所有依赖项以避免锁竞争..."
dep_fetch_success = "依赖预取成功。"
project_root_detected = "检测到项目根目录于: {}"
testing_crate = "正在测试的 Crate: {}"
loading_test_matrix = "正在从 {} 加载测试矩阵"
current_arch = "检测到当前CPU架构: {}"
filtered_arch_cases = "根据当前CPU架构，已过滤掉 {} 个测试用例。剩余 {} 个用例。"
running_as_split_runner = "作为执行器 {}/{} 运行 (分配了 {} 个用例)"
running_as_single_runner = "作为单个执行器运行所有测试用例。"
no_cases_to_run = "此执行器没有要运行的测试用例，成功退出。"
current_os = "检测到当前操作系统: {}"
flaky_cases_found = "发现 {} 个不稳定的测试用例。这些用例在当前操作系统上允许失败。"
running_safe_cases = "\n正在运行 {} 个安全配置，最多 {} 个并行任务..."
running_flaky_cases = "\n正在运行 {} 个不稳定配置，最多 {} 个并行任务..."
fast_fail_triggered = "一个安全测试失败。正在触发快速失败并取消其他安全测试..."
all_tests_passed = "所有测试成功通过！"

# Panics in main.rs
project_dir_not_found = "在 '{}' 找不到项目目录"
cargo_fetch_failed = "'cargo fetch' 执行失败。请检查您的网络和 Cargo.toml 文件。"
manifest_read_failed = "读取清单文件 '{}' 失败"
manifest_parse_failed = "解析 Cargo.toml 清单文件失败"
config_read_failed_path = "找不到或无法读取配置文件 '{}': {}"
config_parse_failed = "解析 TestMatrix.toml 配置文件失败"
runner_index_invalid = "--runner-index 必须小于 --total-runners。"
runner_flags_inconsistent = "--total-runners 和 --runner-index 必须同时提供。"

# reporting.rs
unexpected_failure_banner = "检测到意外失败"
failure_details_for = "  失败详情: {}"
final_summary_banner = "==================== 最终摘要 ===================="
summary_successful_tests = "---成功的测试---"
summary_allowed_failures = "---允许的失败---"
summary_failed_as_expected = "{} (在 {} 上如预期般失败)"
summary_skipped_tests = "--- 跳过的测试 ---"
summary_skipped_count = "{} 个测试被跳过。"
summary_unexpected_failures = "---意外的失败---"
overall_failure = "测试矩阵执行失败"
overall_success = "测试矩阵成功通过"

# command.rs
compiler_error_parse_failed = "无法解析特定的编译器错误。以下是原始输出片段："
capture_stdout_failed = "捕获子进程的 stdout 失败"
capture_stderr_failed = "捕获子进程的 stderr 失败"

# execution.rs
building_test = "正在构建测试: {}"
build_successful = "成功构建测试: {}"
build_failed_preserving = "用例 '{}' 构建失败。正在保留构建产物于: {}"
cleanup_old_artifacts_failed = "清理旧的错误产物目录失败"
copy_artifacts_failed = "为 '{}' 复制错误产物失败: {}"
find_executable_failed = "在 cargo 输出中找不到测试可执行文件"
preserving_artifacts = "正在保留构建产物于: {}"
running_test = "正在运行测试: {}"
test_passed = "测试 '{}' 通过，用时 {}"
test_failed = "测试 '{}' 失败，用时 {}"

# utils.rs
create_temp_dir_failed = "创建临时目录失败"

# init.rs
init_wizard_welcome = "欢迎使用 matrix-runner 设置向导！"
init_wizard_description = "这将帮助您创建一个 `TestMatrix.toml` 文件来配置您的测试。"
init_aborted = "已中止。"
init_detected_crate_name = "检测到的 crate 名称: {}"
system_language_detected = "自动检测到系统语言: {}"
init_overwrite_prompt = "`{}` 已存在。您要覆盖它吗？"
init_case_selection_prompt = "选择要生成的测试用例（使用空格键选择，回车键确认）"
init_no_cases_selected = "未选择测试用例。您的配置文件将是最小的。"
init_no_std_features_prompt = "为 `no_std` 用例输入逗号分隔的功能（如果有的话）"
init_all_features_prompt = "输入您的 crate 的所有功能的逗号分隔列表"
init_custom_command_prompt = "输入要运行的自定义命令"
init_success_created = "成功创建了 `{}`。"
init_usage_hint = "您现在可以运行 `matrix-runner` 来执行您的测试矩阵。"
init_serialize_failed = "将配置序列化为 TOML 失败。"
init_write_failed = "写入 {} 失败"
init_cargo_toml_not_found = "找不到或无法读取 Cargo.toml。"
init_cargo_toml_parse_failed = "解析 Cargo.toml 失败。"
init_user_confirmation_failed = "获取用户确认失败。"

# HTML 报告生成
html_report_title = "测试矩阵报告"
html_report_generated_on = "生成于: {}"
html_report_passed = "通过"
html_report_failed = "失败"
html_report_allowed_failures = "允许的失败"
html_report_skipped = "跳过"
html_report_total = "总计"
html_report_name_column = "名称"
html_report_status_column = "状态"
html_report_output_column = "输出"
html_report_show_hide = "显示/隐藏"

# 初始化向导的测试用例模板
init_template_default_features = "稳定版 Rust 的默认功能"
init_template_no_default_features = "无默认功能（`no_std` 设置）"
init_template_all_features = "启用所有功能"
init_template_custom_command = "自定义命令（例如用于 MIRI 或 wasm-pack）"