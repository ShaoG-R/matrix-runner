# .github/workflows/rust-release.yml

name: Build and Release Rust Project

# 该工作流使用 workflow_dispatch 手动触发，并自动使用上海时区的当前日期作为 Tag (格式: vYYYYMMDD)。
on:
  workflow_dispatch:

# 设置环境变量，让 cargo 的输出带有颜色
env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux-release:
    name: Build Linux Release (amd64)
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.get_project_name.outputs.project_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get project name
        id: get_project_name
        run: echo "project_name=$(grep '^name' Cargo.toml | head -n 1 | sed -e 's/name = "//' -e 's/"//')" >> $GITHUB_OUTPUT

      - name: Build release image
        run: |
          docker build . \
            --file .docker/amd64/Dockerfile \
            --tag ${{ steps.get_project_name.outputs.project_name }}:release \
            --build-arg BUILD_PROFILE=release
      
      - name: Extract release artifact
        run: |
          mkdir -p artifacts
          docker run --rm --entrypoint cat ${{ steps.get_project_name.outputs.project_name }}:release /root/app > artifacts/${{ steps.get_project_name.outputs.project_name }}-linux-amd64

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-release-binary
          path: artifacts/${{ steps.get_project_name.outputs.project_name }}-linux-amd64

  build-linux-debug:
    name: Build Linux Debug (amd64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get project name
        id: get_project_name
        run: echo "project_name=$(grep '^name' Cargo.toml | head -n 1 | sed -e 's/name = "//' -e 's/"//')" >> $GITHUB_OUTPUT

      - name: Build debug image
        run: |
          docker build . \
            --file .docker/amd64/Dockerfile \
            --tag ${{ steps.get_project_name.outputs.project_name }}:debug \
            --build-arg BUILD_PROFILE=debug

      - name: Extract debug artifact
        run: |
          mkdir -p artifacts
          docker run --rm --entrypoint cat ${{ steps.get_project_name.outputs.project_name }}:debug /root/app > artifacts/${{ steps.get_project_name.outputs.project_name }}-debug-linux-amd64
      
      - name: Upload debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-debug-binary
          path: artifacts/${{ steps.get_project_name.outputs.project_name }}-debug-linux-amd64

  build-windows-amd64-release:
    name: Build Windows Release (amd64)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get project name
        id: get_project_name
        run: |
          $projectName = (Get-Content Cargo.toml | Select-String -Pattern '^name' | Select-Object -First 1).Line -replace 'name = "', '' -replace '"', ''
          echo "project_name=$projectName" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Build with cargo
        run: cargo build --release
        shell: cmd
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64-release-binary
          path: target/release/${{ steps.get_project_name.outputs.project_name }}.exe

  build-windows-amd64-debug:
    name: Build Windows Debug (amd64)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get project name
        id: get_project_name
        run: |
          $projectName = (Get-Content Cargo.toml | Select-String -Pattern '^name' | Select-Object -First 1).Line -replace 'name = "', '' -replace '"', ''
          echo "project_name=$projectName" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Build with cargo
        run: cargo build
        shell: cmd
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64-debug-binary
          path: target/debug/${{ steps.get_project_name.outputs.project_name }}.exe
          
  build-macos-arm64-release:
    name: Build macOS Release (arm64)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get project name
        id: get_project_name
        run: echo "project_name=$(grep '^name' Cargo.toml | head -n 1 | sed -e 's/name = "//' -e 's/"//')" >> $GITHUB_OUTPUT

      - name: Build with cargo
        run: cargo build --release
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-release-binary
          path: target/release/${{ steps.get_project_name.outputs.project_name }}

  build-macos-arm64-debug:
    name: Build macOS Debug (arm64)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get project name
        id: get_project_name
        run: echo "project_name=$(grep '^name' Cargo.toml | head -n 1 | sed -e 's/name = "//' -e 's/"//')" >> $GITHUB_OUTPUT

      - name: Build with cargo
        run: cargo build
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-debug-binary
          path: target/debug/${{ steps.get_project_name.outputs.project_name }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: 
      - build-linux-release
      - build-linux-debug
      - build-windows-amd64-release
      - build-windows-amd64-debug
      - build-macos-arm64-release
      - build-macos-arm64-debug
    permissions:
      contents: write
    steps:
      - name: Generate release tag
        id: generate_tag
        run: echo "tag_name=v$(TZ='Asia/Shanghai' date +'%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Delete existing release and tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG="${{ steps.generate_tag.outputs.tag_name }}"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "Release '$TAG' exists. Deleting it and the associated tag..."
            gh release delete "$TAG" --cleanup-tag --yes
            echo "Successfully deleted release and tag '$TAG'."
          else
            echo "Release '$TAG' does not exist. No need to delete."
          fi
        shell: bash

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Prepare release assets
        id: prepare_assets
        run: |
          PROJECT_NAME=${{ needs.build-linux-release.outputs.project_name }}
          mkdir -p release_assets
          # Linux
          mv artifacts/linux-amd64-release-binary/${PROJECT_NAME}-linux-amd64 release_assets/
          mv artifacts/linux-amd64-debug-binary/${PROJECT_NAME}-debug-linux-amd64 release_assets/
          # Windows
          mv artifacts/windows-amd64-release-binary/${PROJECT_NAME}.exe release_assets/${PROJECT_NAME}-windows-amd64.exe
          mv artifacts/windows-amd64-debug-binary/${PROJECT_NAME}.exe release_assets/${PROJECT_NAME}-debug-windows-amd64.exe
          # macOS
          mv artifacts/macos-arm64-release-binary/${PROJECT_NAME} release_assets/${PROJECT_NAME}-macos-arm64
          mv artifacts/macos-arm64-debug-binary/${PROJECT_NAME} release_assets/${PROJECT_NAME}-debug-macos-arm64
        shell: bash

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.generate_tag.outputs.tag_name }}
          name: Release ${{ steps.generate_tag.outputs.tag_name }}
          body: |
            ## Release Notes
            - Statically linked Linux binaries (x86_64-musl).
            - Windows binaries (x86_64).
            - macOS binaries (arm64).
            - Includes both release and debug versions, built in parallel.
            - Linux version built via a reusable Dockerfile.
          files: release_assets/*
          token: ${{ secrets.GITHUB_TOKEN }}
